package Analizadores_escenario; 

import Logica.Posicion;
import Logica.Escenario;
import Logica.Arbol_AST;
import java_cup.runtime.*;
import javax.swing.JOptionPane;
import Logica.Error_encontrado;
 
parser code 
{: 

//variables utilizadas para el analisis sintactico
private boolean estado = true;
private Posicion posicion = null;
private Escenario escenario  = new Escenario();

public boolean getEstado(){
	return estado;
}

public void setEscenario(){
	escenario = new Escenario();
}

public void agregar_posicion(Posicion p){
	if(Arbol_AST.getTabla_objetos().containsKey(p.getNombre())){
		escenario.getLista_posicion().add(p);
	}
}

public void insertar_escenario(Escenario esc){

	boolean encontrado = false;
	int cont = 0;
	for(cont = 0; cont > Arbol_AST.getLista_escenarios().size(); cont++){
            if(Arbol_AST.getLista_escenarios().get(cont).getNombre().equals(esc.getNombre())){
                Arbol_AST.getLista_escenarios().add(cont, esc);
                encontrado = true;
                break;
            }//verifico que si el escenario existe, si es asi, sobrescribo
	}//fin del contador para recorrer la lista de escenarios
        if(encontrado == false){
            Arbol_AST.getLista_escenarios().add(cont, esc);
        }//si no fue encontrado en la lista se agrega al final
		
}//fin del metodo para almacenar escenarios

/**Metodo al que se llama automáticamente ante algún error sintactico.*/ 
public void syntax_error(Symbol s){ 
 //System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
 Error_encontrado error_sintactico = new Error_encontrado("Archivo Escenario",s.value.toString(), "", s.left, s.right+1, true);
 Arbol_AST.getLista_errores().add(error_sintactico);
} 
 /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/ 
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
	System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 
:} 

terminal abrir_tag, r_escenario, r_nombre, r_fondo, r_ancho, r_alto, r_personajes, r_heroes, r_villanos, r_paredes, r_suelo, 
r_extras, r_armas, r_bonus, r_meta, s_igual, s_punto_coma, s_guion, cerrar_tag, abrir_p, atributo_nombre, numero, s_dospuntos,
s_coma, cerrar_p;

non terminal INICIO, ARCHIVO_ESCENARIO, ESCENARIO, CONFIGURACION_ESCENARIO, PERSONAJE, PAREDES, SUELO, EXTRAS, META, 
CONFIGURACION_PERSONAJE, CONFIGURACION_EXTRAS, DECLARACION_MULTIPLE1, DECLARACION_MULTIPLE2, DECLARACION2, DECLARACION1;
  
start with INICIO;  

INICIO ::=  ARCHIVO_ESCENARIO 			
			{:
			if(parser.estado == true){
                JOptionPane.showMessageDialog(null,"NO SE HAN ENCONTRADO "
                + "ERRORES","EXITO",JOptionPane.WARNING_MESSAGE);	
			}else{
     			JOptionPane.showMessageDialog(null,"EXISTEN ERRORES LEXICOS O "
                + "SINTACTICOS\n CONSULTE EL AREA DE ERRORES"
                + "","ERROR",JOptionPane.ERROR_MESSAGE);
			} 
			:};

ARCHIVO_ESCENARIO ::= 	ARCHIVO_ESCENARIO ESCENARIO 
						|ESCENARIO
						|error{:parser.estado = false;:};

ESCENARIO ::=	abrir_tag r_escenario r_nombre s_igual atributo_nombre:e s_punto_coma r_fondo s_igual atributo_nombre:p s_punto_coma
				r_ancho s_igual numero:x s_punto_coma r_alto s_igual numero:y cerrar_tag CONFIGURACION_ESCENARIO abrir_tag s_guion 
				r_escenario cerrar_tag
				{:
				escenario.setNombre(e.toString()); 
				escenario.setFondo(p.toString());
				escenario.setLargo(Integer.parseInt(x.toString()));
				escenario.setAncho(Integer.parseInt(y.toString()));
				insertar_escenario(escenario);
				:};


CONFIGURACION_ESCENARIO ::= CONFIGURACION_ESCENARIO PERSONAJE
							|CONFIGURACION_ESCENARIO PAREDES 
							|CONFIGURACION_ESCENARIO SUELO 
							|CONFIGURACION_ESCENARIO EXTRAS 
							|CONFIGURACION_ESCENARIO META
							|PERSONAJE
							|PAREDES
							|SUELO
							|EXTRAS
							|META
							|error{:parser.estado = false;:};

PERSONAJE ::= abrir_tag r_personajes cerrar_tag CONFIGURACION_PERSONAJE abrir_tag s_guion r_personajes cerrar_tag;

PAREDES ::= abrir_tag r_paredes cerrar_tag DECLARACION_MULTIPLE2:p1 abrir_tag s_guion r_paredes cerrar_tag
			{:agregar_posicion((Posicion)p1);:};

SUELO ::= abrir_tag r_suelo cerrar_tag DECLARACION_MULTIPLE2:p1 abrir_tag s_guion r_suelo cerrar_tag
			{:agregar_posicion((Posicion)p1);:};

EXTRAS ::= abrir_tag r_extras cerrar_tag CONFIGURACION_EXTRAS abrir_tag s_guion r_extras cerrar_tag;

META ::= abrir_tag r_meta cerrar_tag DECLARACION1:p1 abrir_tag s_guion r_meta cerrar_tag
			{:agregar_posicion((Posicion)p1);:};

CONFIGURACION_PERSONAJE ::= abrir_tag r_heroes cerrar_tag DECLARACION1:p1 abrir_tag s_guion r_heroes cerrar_tag
							abrir_tag r_villanos cerrar_tag  DECLARACION_MULTIPLE1:p2 abrir_tag s_guion r_villanos cerrar_tag
							{:agregar_posicion((Posicion)p1); agregar_posicion((Posicion)p2);:}
							|abrir_tag r_villanos cerrar_tag  DECLARACION_MULTIPLE1:p1 abrir_tag s_guion r_villanos cerrar_tag 
							abrir_tag r_heroes cerrar_tag DECLARACION1:p2 abrir_tag s_guion r_heroes cerrar_tag
							{:agregar_posicion((Posicion)p1); agregar_posicion((Posicion)p2);:}
							|error{:parser.estado = false;:};

CONFIGURACION_EXTRAS ::= 	abrir_tag r_armas cerrar_tag DECLARACION_MULTIPLE1:p1 abrir_tag s_guion r_armas cerrar_tag 
							abrir_tag r_bonus cerrar_tag DECLARACION_MULTIPLE1:p2 abrir_tag s_guion r_bonus cerrar_tag
							{:escenario.getLista_posicion().add((Posicion)p1); escenario.getLista_posicion().add((Posicion)p2);:}
							|abrir_tag r_bonus cerrar_tag DECLARACION_MULTIPLE1:p1 abrir_tag s_guion r_bonus cerrar_tag 
							abrir_tag r_armas cerrar_tag DECLARACION_MULTIPLE1:p2 abrir_tag s_guion r_armas cerrar_tag
							{:escenario.getLista_posicion().add((Posicion)p1); escenario.getLista_posicion().add((Posicion)p2);:}
							|error {:parser.estado = false;:};

DECLARACION_MULTIPLE1 ::=	DECLARACION_MULTIPLE1:p1 DECLARACION1:p2 {:agregar_posicion((Posicion)p1); RESULT = p2;:}
							|DECLARACION1:p 	{:RESULT = p;:}
							|error{:parser.estado = false;:};

DECLARACION_MULTIPLE2 ::=	DECLARACION_MULTIPLE2:p1 DECLARACION1:p2 	{:agregar_posicion((Posicion)p1); RESULT = p2;:}
							|DECLARACION_MULTIPLE2:p1 DECLARACION2:p2 	{:agregar_posicion((Posicion)p1); RESULT = p2;:}
							|DECLARACION1:p {:RESULT = p;:}
							|DECLARACION2:p {:RESULT = p;:}
							|error{:parser.estado = false;:};


DECLARACION2 ::=	atributo_nombre:n abrir_p numero:x1 s_dospuntos numero:x2 s_coma numero:y cerrar_p s_punto_coma
					{:posicion = new Posicion(); posicion.setNombre(n.toString()); posicion.setX_ini(Integer.parseInt(x1.toString()));
				  	posicion.setX_fin(Integer.parseInt(x2.toString())); posicion.setY_ini(Integer.parseInt(y.toString())); 
				  	RESULT = posicion;:}
					|atributo_nombre:n abrir_p numero:x s_coma numero:y1 s_dospuntos numero:y2 cerrar_p s_punto_coma
					{:posicion = new Posicion(); posicion.setNombre(n.toString()); posicion.setX_ini(Integer.parseInt(x.toString()));
				  	posicion.setY_ini(Integer.parseInt(y1.toString())); posicion.setY_fin(Integer.parseInt(y2.toString())); 
				  	RESULT = posicion;:};

DECLARACION1 ::= atributo_nombre:n abrir_p numero:x s_coma numero:y cerrar_p s_punto_coma
				{:posicion = new Posicion(); posicion.setNombre(n.toString()); posicion.setX_ini(Integer.parseInt(x.toString()));
				  posicion.setY_ini(Integer.parseInt(y.toString())); RESULT = posicion;:};
					
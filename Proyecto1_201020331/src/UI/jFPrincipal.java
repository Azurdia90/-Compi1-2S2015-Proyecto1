package UI;


import java.io.BufferedReader;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import Analizadores_configuracion.Lexico_configuracion;
import Analizadores_configuracion.Sintactico_configuracion;
import Analizadores_escenario.Lexico_escenario;
import Analizadores_escenario.Sintactico_escenario;
import Analizadores_secuencia.Lexico_secuencia;
import Analizadores_secuencia.Sintactico_secuencia;
import Logica.Arbol_AST;
import Logica.Escenario;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;


/**
 *
 * @author Cristian
 */
public class jFPrincipal extends javax.swing.JFrame {

    private Lexico_configuracion analizador_lexico_configuracion;
    private Sintactico_configuracion analizador_sintactico_configuracion;
    private Lexico_escenario analizador_lexico_escenarios;
    private Sintactico_escenario analizador_sintactico_escenarios;
    private Lexico_secuencia analizador_lexico_secuencia;
    private Sintactico_secuencia analizador_sintactico_secuencia;
    
    private JFileChooser manejo_archivos;
    private File archivo;
    
    public jFPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTAEntrada = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMINuevo = new javax.swing.JMenuItem();
        jMIAbrir = new javax.swing.JMenuItem();
        jMIGuardar = new javax.swing.JMenuItem();
        jMIGuardar_como = new javax.swing.JMenuItem();
        jMISalir = new javax.swing.JMenuItem();
        jMTabla_simbolos = new javax.swing.JMenu();
        jMICompilar_configuraciones = new javax.swing.JMenuItem();
        jMICompilar_escenarios = new javax.swing.JMenuItem();
        jMICompilar_secuencias = new javax.swing.JMenuItem();
        jMIInicio = new javax.swing.JMenuItem();
        jMIErrores = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("EDITOR DE JUEGOS");

        jTAEntrada.setColumns(20);
        jTAEntrada.setRows(5);
        jScrollPane1.setViewportView(jTAEntrada);

        jMenu2.setText("Archivo");

        jMINuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMINuevo.setText("Nuevo");
        jMINuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMINuevoActionPerformed(evt);
            }
        });
        jMenu2.add(jMINuevo);

        jMIAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMIAbrir.setText("Abrir");
        jMIAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAbrirActionPerformed(evt);
            }
        });
        jMenu2.add(jMIAbrir);

        jMIGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMIGuardar.setText("Guardar");
        jMIGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIGuardarActionPerformed(evt);
            }
        });
        jMenu2.add(jMIGuardar);

        jMIGuardar_como.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMIGuardar_como.setText("Guardar Como");
        jMIGuardar_como.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIGuardar_comoActionPerformed(evt);
            }
        });
        jMenu2.add(jMIGuardar_como);

        jMISalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jMISalir.setText("Salir");
        jMISalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalirActionPerformed(evt);
            }
        });
        jMenu2.add(jMISalir);

        jMenuBar1.add(jMenu2);

        jMTabla_simbolos.setText("Ejecutar");

        jMICompilar_configuraciones.setText("Compilar Archivo de Configuración");
        jMICompilar_configuraciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMICompilar_configuracionesActionPerformed(evt);
            }
        });
        jMTabla_simbolos.add(jMICompilar_configuraciones);

        jMICompilar_escenarios.setText("Compilar Archivo de Carga de Escenario");
        jMICompilar_escenarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMICompilar_escenariosActionPerformed(evt);
            }
        });
        jMTabla_simbolos.add(jMICompilar_escenarios);

        jMICompilar_secuencias.setText("Compilar Archivo de secuencia de Escenarios");
        jMICompilar_secuencias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMICompilar_secuenciasActionPerformed(evt);
            }
        });
        jMTabla_simbolos.add(jMICompilar_secuencias);

        jMIInicio.setText("Ejecutar juego");
        jMIInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIInicioActionPerformed(evt);
            }
        });
        jMTabla_simbolos.add(jMIInicio);

        jMIErrores.setText("Errores");
        jMIErrores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIErroresActionPerformed(evt);
            }
        });
        jMTabla_simbolos.add(jMIErrores);

        jMenuItem11.setText("Tabla de Simbolos");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMTabla_simbolos.add(jMenuItem11);

        jMenuBar1.add(jMTabla_simbolos);

        jMenu4.setText("Ayuda");

        jMenuItem12.setText("Manual de Usuario");
        jMenu4.add(jMenuItem12);

        jMenuItem13.setText("Manual Técnico");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem13);

        jMenuItem14.setText("Acerca de");
        jMenu4.add(jMenuItem14);

        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
     public void manejar_archivo(){
        manejo_archivos = new JFileChooser();
        int resultado = 0;
        FileNameExtensionFilter extension = new FileNameExtensionFilter("*.conf", "conf");
        manejo_archivos.setDialogTitle("Abrir Archivo");
        manejo_archivos.setDialogType(JFileChooser.OPEN_DIALOG);
        manejo_archivos.setFileFilter(extension);
        resultado = manejo_archivos.showOpenDialog(null);
        if(resultado == manejo_archivos.CANCEL_OPTION){
            archivo = null;
        }else if(resultado == manejo_archivos.APPROVE_OPTION){
            archivo = manejo_archivos.getSelectedFile().getAbsoluteFile();
        }      
    }
    
    public void guardar_archivo(){
        try{
             String aux = jTAEntrada.getText();
            manejo_archivos = new JFileChooser();
            FileNameExtensionFilter extension = new FileNameExtensionFilter("*.conf", "conf");
            manejo_archivos.setDialogTitle("Guardar Como");
            manejo_archivos.setDialogType(JFileChooser.SAVE_DIALOG);
            manejo_archivos.setFileFilter(extension);
            int resultado = manejo_archivos.showOpenDialog(null);
            if(resultado == manejo_archivos.APPROVE_OPTION){
                archivo = manejo_archivos.getSelectedFile();
                FileWriter  escribir = new FileWriter(archivo + ".conf");
                BufferedWriter escribir2 = new BufferedWriter(escribir);
                String[] lineas = aux.split("\n");
                    int tam = lineas.length;
                    for (int i = 0; i < tam; i++) {
                        escribir2.write(lineas[i] + "\n");
                    }
                    escribir2.close();
            }
        }catch(Exception e){
             JOptionPane.showMessageDialog(null, "A ocurrido un error guardar el documento: "
                        + e);
        }
    }//fin del metodo guardar archivo
    
    public void graficar_escenario(int cont){
        int c = 0;
        if(Arbol_AST.getOrden_escenarios().containsKey(cont)){
            String nombre_escenario = Arbol_AST.getOrden_escenarios().get(cont);
            for(c=0; c<Arbol_AST.getLista_escenarios().size();c++){
                if(Arbol_AST.getLista_escenarios().get(c).getNombre().equals(nombre_escenario)){
                    Escenario escenario = Arbol_AST.getLista_escenarios().get(c);
                    JFJuego juego = new JFJuego(escenario);
                    juego.show();
                }
            } 
        }else{
           graficar_escenario(cont+1); 
        }
    }
    
    private void jMIInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIInicioActionPerformed
        int cont = 1;
        if(!Arbol_AST.getTabla_objetos().isEmpty() && 
                !Arbol_AST.getOrden_escenarios().isEmpty() &&
                        !Arbol_AST.getLista_escenarios().isEmpty()){
            graficar_escenario(cont); 
        }else{
            JOptionPane.showMessageDialog(null,"FALTAN PARAMETROS POR INGRESAR","Precaución",JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jMIInicioActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMICompilar_configuracionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMICompilar_configuracionesActionPerformed
        try{
            String archivo_entrada = jTAEntrada.getText();
            if(!archivo_entrada.isEmpty()){
                analizador_lexico_configuracion = new Lexico_configuracion(new BufferedReader(new StringReader(archivo_entrada)));
                analizador_sintactico_configuracion = new Sintactico_configuracion(analizador_lexico_configuracion);
                analizador_sintactico_configuracion.parse();
            }else{
                JOptionPane.showMessageDialog(null,"NO HAY TEXTO PARA ANALIZAR","Precaución",JOptionPane.WARNING_MESSAGE);
            }
                       
        }catch(Exception ex){
             Logger.getLogger(jFPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMICompilar_configuracionesActionPerformed

    private void jMISalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMISalirActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        jFTabla_simbolos ventana_tabla_simbolos = new jFTabla_simbolos();
        ventana_tabla_simbolos.show();
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMIErroresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIErroresActionPerformed
        jFTabla_errores ventana_tabla_errores = new jFTabla_errores();
        ventana_tabla_errores.show();
    }//GEN-LAST:event_jMIErroresActionPerformed

    private void jMICompilar_escenariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMICompilar_escenariosActionPerformed
        try{
            String archivo_entrada = jTAEntrada.getText();
            if(!archivo_entrada.isEmpty()){
                analizador_lexico_escenarios = new Lexico_escenario(new BufferedReader(new StringReader(archivo_entrada)));
                analizador_sintactico_escenarios = new Sintactico_escenario(analizador_lexico_escenarios);
                analizador_sintactico_escenarios.parse();
            }else{
                JOptionPane.showMessageDialog(null,"NO HAY TEXTO PARA ANALIZAR","Precaución",JOptionPane.WARNING_MESSAGE);
            }
                       
        }catch(Exception ex){
             Logger.getLogger(jFPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMICompilar_escenariosActionPerformed

    private void jMICompilar_secuenciasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMICompilar_secuenciasActionPerformed
        try{
            String archivo_entrada = jTAEntrada.getText();
            if(!archivo_entrada.isEmpty()){
                analizador_lexico_secuencia = new Lexico_secuencia(new BufferedReader(new StringReader(archivo_entrada)));
                analizador_sintactico_secuencia = new Sintactico_secuencia(analizador_lexico_secuencia);
                analizador_sintactico_secuencia.parse();
            }else{
                JOptionPane.showMessageDialog(null,"NO HAY TEXTO PARA ANALIZAR","Precaución",JOptionPane.WARNING_MESSAGE);
            }
        }catch(Exception ex){
            Logger.getLogger(jFPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMICompilar_secuenciasActionPerformed

    private void jMIAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAbrirActionPerformed
        manejar_archivo();
        //jTAEntrada.setContentType("text");
        if(archivo.exists()){ //verificamos que el archivo abierto existe
            try{
                BufferedReader leer = new BufferedReader(new FileReader(archivo));
                StringBuffer leer_cadena = new StringBuffer();
                String cadena_entrada = null;
                jTAEntrada.setText("");
                while((cadena_entrada = leer.readLine()) != null ){
                    leer_cadena.append(cadena_entrada + "\n");
                }
                jTAEntrada.setText(leer_cadena.toString());
            }catch(Exception e){
                JOptionPane.showMessageDialog(null, "error al cargar archivo");
            }
        }else{ //de lo contrario desplegamos un dialogo adviertiendo
            JOptionPane.showMessageDialog(null, "archivo no existe");
        }
    }//GEN-LAST:event_jMIAbrirActionPerformed

    private void jMINuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMINuevoActionPerformed
        jTAEntrada.setText("");
    }//GEN-LAST:event_jMINuevoActionPerformed

    private void jMIGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIGuardarActionPerformed
        guardar_archivo();
    }//GEN-LAST:event_jMIGuardarActionPerformed

    private void jMIGuardar_comoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIGuardar_comoActionPerformed
        guardar_archivo();
    }//GEN-LAST:event_jMIGuardar_comoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jMIAbrir;
    private javax.swing.JMenuItem jMICompilar_configuraciones;
    private javax.swing.JMenuItem jMICompilar_escenarios;
    private javax.swing.JMenuItem jMICompilar_secuencias;
    private javax.swing.JMenuItem jMIErrores;
    private javax.swing.JMenuItem jMIGuardar;
    private javax.swing.JMenuItem jMIGuardar_como;
    private javax.swing.JMenuItem jMIInicio;
    private javax.swing.JMenuItem jMINuevo;
    private javax.swing.JMenuItem jMISalir;
    private javax.swing.JMenu jMTabla_simbolos;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTAEntrada;
    // End of variables declaration//GEN-END:variables
}

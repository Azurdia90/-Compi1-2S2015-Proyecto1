
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package Analizadores_secuencia;

import Logica.Arbol_AST;
import java_cup.runtime.*;
import javax.swing.JOptionPane;
import Logica.Error_encontrado;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico_secuencia extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tabla_simbolos_secuencia.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico_secuencia() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico_secuencia(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_secuencia(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\010\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\003\003\000\002\004\004\000\002\004\003" +
    "\000\002\004\003\000\002\005\016" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\006\003\004\004\007\001\002\000\004\002" +
    "\ufffe\001\002\000\004\002\036\001\002\000\004\002\000" +
    "\001\002\000\004\005\010\001\002\000\004\014\011\001" +
    "\002\000\006\003\012\004\014\001\002\000\004\004\ufffb" +
    "\001\002\000\004\004\032\001\002\000\004\006\016\001" +
    "\002\000\004\004\ufffc\001\002\000\004\007\017\001\002" +
    "\000\004\011\020\001\002\000\004\015\021\001\002\000" +
    "\004\012\022\001\002\000\004\010\023\001\002\000\004" +
    "\011\024\001\002\000\004\016\025\001\002\000\004\012" +
    "\026\001\002\000\004\013\027\001\002\000\004\014\030" +
    "\001\002\000\004\004\ufffa\001\002\000\004\004\ufffd\001" +
    "\002\000\006\006\016\013\033\001\002\000\004\005\034" +
    "\001\002\000\004\014\035\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\034\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\012\005\014\001\001\000" +
    "\002\001\001\000\004\005\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_secuencia$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_secuencia$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_secuencia$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

//variables utilizadas para el analisis sintactico
private boolean estado = true;


public boolean getEstado(){
	return estado;
}


/**Metodo al que se llama automáticamente ante algún error sintactico.*/ 
public void syntax_error(Symbol s){ 
 //System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
 Error_encontrado error_sintactico = new Error_encontrado("Archivo Escenario",s.value.toString(), "", s.left, s.right+1, true);
 Arbol_AST.getLista_errores().add(error_sintactico);
} 
 /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/ 
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
	System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico_secuencia$actions {
  private final Sintactico_secuencia parser;

  /** Constructor */
  CUP$Sintactico_secuencia$actions(Sintactico_secuencia parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico_secuencia$do_action_part00000000(
    int                        CUP$Sintactico_secuencia$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_secuencia$parser,
    java.util.Stack            CUP$Sintactico_secuencia$stack,
    int                        CUP$Sintactico_secuencia$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_secuencia$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_secuencia$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.elementAt(CUP$Sintactico_secuencia$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.elementAt(CUP$Sintactico_secuencia$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_secuencia$stack.elementAt(CUP$Sintactico_secuencia$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_secuencia$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.elementAt(CUP$Sintactico_secuencia$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_secuencia$parser.done_parsing();
          return CUP$Sintactico_secuencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ARCHIVO_SECUENCIA 
            {
              Object RESULT =null;
		
			if(parser.estado == true){
                JOptionPane.showMessageDialog(null,"NO SE HAN ENCONTRADO "
                + "ERRORES","EXITO",JOptionPane.WARNING_MESSAGE);	
			}else{
     			JOptionPane.showMessageDialog(null,"EXISTEN ERRORES LEXICOS O "
                + "SINTACTICOS\n CONSULTE EL AREA DE ERRORES"
                + "","ERROR",JOptionPane.ERROR_MESSAGE);
			} 
			
              CUP$Sintactico_secuencia$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.peek()), RESULT);
            }
          return CUP$Sintactico_secuencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ARCHIVO_SECUENCIA ::= abrir_tag r_escenarios cerrar_tag ORDEN_ESCENARIO abrir_tag s_guion r_escenarios cerrar_tag 
            {
              Object RESULT =null;

              CUP$Sintactico_secuencia$result = parser.getSymbolFactory().newSymbol("ARCHIVO_SECUENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.elementAt(CUP$Sintactico_secuencia$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.peek()), RESULT);
            }
          return CUP$Sintactico_secuencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ARCHIVO_SECUENCIA ::= error 
            {
              Object RESULT =null;
		parser.estado = false;
              CUP$Sintactico_secuencia$result = parser.getSymbolFactory().newSymbol("ARCHIVO_SECUENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.peek()), RESULT);
            }
          return CUP$Sintactico_secuencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ORDEN_ESCENARIO ::= ORDEN_ESCENARIO ESCENARIO 
            {
              Object RESULT =null;

              CUP$Sintactico_secuencia$result = parser.getSymbolFactory().newSymbol("ORDEN_ESCENARIO",2, ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.elementAt(CUP$Sintactico_secuencia$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.peek()), RESULT);
            }
          return CUP$Sintactico_secuencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ORDEN_ESCENARIO ::= ESCENARIO 
            {
              Object RESULT =null;

              CUP$Sintactico_secuencia$result = parser.getSymbolFactory().newSymbol("ORDEN_ESCENARIO",2, ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.peek()), RESULT);
            }
          return CUP$Sintactico_secuencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ORDEN_ESCENARIO ::= error 
            {
              Object RESULT =null;
		parser.estado = false;
              CUP$Sintactico_secuencia$result = parser.getSymbolFactory().newSymbol("ORDEN_ESCENARIO",2, ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.peek()), RESULT);
            }
          return CUP$Sintactico_secuencia$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ESCENARIO ::= abrir_tag r_escenario r_nombre s_igual atributo_nombre s_punto_coma r_orden s_igual numero s_punto_coma s_guion cerrar_tag 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.elementAt(CUP$Sintactico_secuencia$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.elementAt(CUP$Sintactico_secuencia$top-7)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_secuencia$stack.elementAt(CUP$Sintactico_secuencia$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.elementAt(CUP$Sintactico_secuencia$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.elementAt(CUP$Sintactico_secuencia$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_secuencia$stack.elementAt(CUP$Sintactico_secuencia$top-3)).value;
		Arbol_AST.getOrden_escenarios().put(Integer.parseInt(p.toString()),n.toString());
              CUP$Sintactico_secuencia$result = parser.getSymbolFactory().newSymbol("ESCENARIO",3, ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.elementAt(CUP$Sintactico_secuencia$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico_secuencia$stack.peek()), RESULT);
            }
          return CUP$Sintactico_secuencia$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico_secuencia$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico_secuencia$do_action(
    int                        CUP$Sintactico_secuencia$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_secuencia$parser,
    java.util.Stack            CUP$Sintactico_secuencia$stack,
    int                        CUP$Sintactico_secuencia$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico_secuencia$do_action_part00000000(
                               CUP$Sintactico_secuencia$act_num,
                               CUP$Sintactico_secuencia$parser,
                               CUP$Sintactico_secuencia$stack,
                               CUP$Sintactico_secuencia$top);
    }
}

}

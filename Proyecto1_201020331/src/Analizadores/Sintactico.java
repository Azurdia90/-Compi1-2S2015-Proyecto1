
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package Analizadores;

import java.io.File;
import Logica.Objeto;
import Logica.Arbol_AST;
import java_cup.runtime.*;
import Logica.Error_encontrado;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tabla_simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\003\003\000\002\004\032\000\002\004\032" +
    "\000\002\004\032\000\002\004\032\000\002\004\032\000" +
    "\002\004\003\000\002\005\007\000\002\005\005\000\002" +
    "\005\003\000\002\006\012\000\002\006\012\000\002\007" +
    "\007\000\002\007\005\000\002\007\003\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\011\006\000\002\013\006\000\002\012\006\000" +
    "\002\014\006\000\002\015\006\000\002\016\006\000\002" +
    "\016\003\000\002\017\006\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\006\003\005\004\007\001\002\000\004\002" +
    "\000\001\002\000\004\002\ufffe\001\002\000\004\002\302" +
    "\001\002\000\004\005\010\001\002\000\004\026\011\001" +
    "\002\000\006\003\012\004\014\001\002\000\004\004\ufff8" +
    "\001\002\000\004\004\276\001\002\000\010\006\016\007" +
    "\015\010\017\001\002\000\004\026\231\001\002\000\004" +
    "\026\164\001\002\000\004\026\020\001\002\000\006\003" +
    "\022\027\023\001\002\000\004\004\112\001\002\000\004" +
    "\004\ufff0\001\002\000\022\003\035\011\024\012\034\013" +
    "\036\014\032\024\030\025\041\033\025\001\002\000\004" +
    "\030\107\001\002\000\004\030\104\001\002\000\004\037" +
    "\101\001\002\000\024\003\035\011\024\012\034\013\036" +
    "\014\032\024\030\025\041\033\025\037\uffe3\001\002\000" +
    "\004\030\075\001\002\000\024\003\035\011\024\012\034" +
    "\013\036\014\032\024\030\025\041\033\025\037\uffe5\001" +
    "\002\000\004\030\062\001\002\000\024\003\035\011\024" +
    "\012\034\013\036\014\032\024\030\025\041\033\025\037" +
    "\uffe7\001\002\000\004\030\056\001\002\000\024\003\uffdb" +
    "\011\uffdb\012\uffdb\013\uffdb\014\uffdb\024\uffdb\025\uffdb\033" +
    "\uffdb\037\uffdb\001\002\000\004\030\053\001\002\000\024" +
    "\003\035\011\024\012\034\013\036\014\032\024\030\025" +
    "\041\033\025\037\uffe4\001\002\000\024\003\035\011\024" +
    "\012\034\013\036\014\032\024\030\025\041\033\025\037" +
    "\uffe8\001\002\000\004\030\046\001\002\000\024\003\035" +
    "\011\024\012\034\013\036\014\032\024\030\025\041\033" +
    "\025\037\uffe2\001\002\000\024\003\035\011\024\012\034" +
    "\013\036\014\032\024\030\025\041\033\025\037\uffe6\001" +
    "\002\000\004\037\uffed\001\002\000\004\037\uffe9\001\002" +
    "\000\004\034\047\001\002\000\004\032\050\001\002\000" +
    "\024\003\uffda\011\uffda\012\uffda\013\uffda\014\uffda\024\uffda" +
    "\025\uffda\033\uffda\037\uffda\001\002\000\004\037\uffef\001" +
    "\002\000\004\037\uffeb\001\002\000\004\035\054\001\002" +
    "\000\004\032\055\001\002\000\024\003\uffdf\011\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\024\uffdf\025\uffdf\033\uffdf\037\uffdf" +
    "\001\002\000\004\035\057\001\002\000\004\032\060\001" +
    "\002\000\024\003\uffde\011\uffde\012\uffde\013\uffde\014\uffde" +
    "\024\uffde\025\uffde\033\uffde\037\uffde\001\002\000\004\037" +
    "\uffee\001\002\000\020\015\070\016\065\017\063\020\071" +
    "\021\067\022\066\023\064\001\002\000\004\032\uffd6\001" +
    "\002\000\004\032\uffd7\001\002\000\004\032\uffd3\001\002" +
    "\000\004\032\uffd9\001\002\000\004\032\uffd8\001\002\000" +
    "\004\032\uffd5\001\002\000\004\032\uffd4\001\002\000\004" +
    "\032\073\001\002\000\024\003\uffdc\011\uffdc\012\uffdc\013" +
    "\uffdc\014\uffdc\024\uffdc\025\uffdc\033\uffdc\037\uffdc\001\002" +
    "\000\004\037\uffec\001\002\000\004\035\076\001\002\000" +
    "\004\032\077\001\002\000\024\003\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\014\uffe0\024\uffe0\025\uffe0\033\uffe0\037\uffe0\001" +
    "\002\000\004\037\uffea\001\002\000\006\004\ufff1\036\102" +
    "\001\002\000\006\003\022\027\023\001\002\000\004\004" +
    "\ufff2\001\002\000\004\034\105\001\002\000\004\032\106" +
    "\001\002\000\024\003\uffdd\011\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\024\uffdd\025\uffdd\033\uffdd\037\uffdd\001\002\000\004" +
    "\031\110\001\002\000\004\032\111\001\002\000\024\003" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\024\uffe1\025\uffe1" +
    "\033\uffe1\037\uffe1\001\002\000\004\040\113\001\002\000" +
    "\004\010\114\001\002\000\004\026\115\001\002\000\004" +
    "\004\116\001\002\000\004\007\117\001\002\000\004\026" +
    "\120\001\002\000\006\003\022\027\023\001\002\000\004" +
    "\004\122\001\002\000\004\040\123\001\002\000\004\007" +
    "\124\001\002\000\004\026\125\001\002\000\004\004\126" +
    "\001\002\000\004\006\127\001\002\000\004\026\130\001" +
    "\002\000\006\003\131\027\132\001\002\000\004\004\ufff5" +
    "\001\002\000\006\011\142\033\140\001\002\000\004\004" +
    "\134\001\002\000\004\040\135\001\002\000\004\006\136" +
    "\001\002\000\004\026\137\001\002\000\004\004\ufffb\001" +
    "\002\000\004\030\155\001\002\000\004\037\152\001\002" +
    "\000\004\030\143\001\002\000\004\031\144\001\002\000" +
    "\004\032\145\001\002\000\004\033\146\001\002\000\004" +
    "\030\147\001\002\000\004\034\150\001\002\000\004\032" +
    "\151\001\002\000\004\037\ufff4\001\002\000\006\004\ufff6" +
    "\036\153\001\002\000\006\003\131\027\132\001\002\000" +
    "\004\004\ufff7\001\002\000\004\034\156\001\002\000\004" +
    "\032\157\001\002\000\004\011\160\001\002\000\004\030" +
    "\161\001\002\000\004\031\162\001\002\000\004\032\163" +
    "\001\002\000\004\037\ufff3\001\002\000\006\003\131\027" +
    "\132\001\002\000\004\004\166\001\002\000\004\040\167" +
    "\001\002\000\004\006\170\001\002\000\004\026\171\001" +
    "\002\000\004\004\172\001\002\000\006\007\173\010\174" +
    "\001\002\000\004\026\213\001\002\000\004\026\175\001" +
    "\002\000\006\003\022\027\023\001\002\000\004\004\177" +
    "\001\002\000\004\040\200\001\002\000\004\010\201\001" +
    "\002\000\004\026\202\001\002\000\004\004\203\001\002" +
    "\000\004\007\204\001\002\000\004\026\205\001\002\000" +
    "\006\003\022\027\023\001\002\000\004\004\207\001\002" +
    "\000\004\040\210\001\002\000\004\007\211\001\002\000" +
    "\004\026\212\001\002\000\004\004\ufff9\001\002\000\006" +
    "\003\022\027\023\001\002\000\004\004\215\001\002\000" +
    "\004\040\216\001\002\000\004\007\217\001\002\000\004" +
    "\026\220\001\002\000\004\004\221\001\002\000\004\010" +
    "\222\001\002\000\004\026\223\001\002\000\006\003\022" +
    "\027\023\001\002\000\004\004\225\001\002\000\004\040" +
    "\226\001\002\000\004\010\227\001\002\000\004\026\230" +
    "\001\002\000\004\004\ufffd\001\002\000\006\003\022\027" +
    "\023\001\002\000\004\004\233\001\002\000\004\040\234" +
    "\001\002\000\004\007\235\001\002\000\004\026\236\001" +
    "\002\000\004\004\237\001\002\000\006\006\240\010\241" +
    "\001\002\000\004\026\260\001\002\000\004\026\242\001" +
    "\002\000\006\003\022\027\023\001\002\000\004\004\244" +
    "\001\002\000\004\040\245\001\002\000\004\010\246\001" +
    "\002\000\004\026\247\001\002\000\004\004\250\001\002" +
    "\000\004\006\251\001\002\000\004\026\252\001\002\000" +
    "\006\003\131\027\132\001\002\000\004\004\254\001\002" +
    "\000\004\040\255\001\002\000\004\006\256\001\002\000" +
    "\004\026\257\001\002\000\004\004\ufffa\001\002\000\006" +
    "\003\131\027\132\001\002\000\004\004\262\001\002\000" +
    "\004\040\263\001\002\000\004\006\264\001\002\000\004" +
    "\026\265\001\002\000\004\004\266\001\002\000\004\010" +
    "\267\001\002\000\004\026\270\001\002\000\006\003\022" +
    "\027\023\001\002\000\004\004\272\001\002\000\004\040" +
    "\273\001\002\000\004\010\274\001\002\000\004\026\275" +
    "\001\002\000\004\004\ufffc\001\002\000\004\040\277\001" +
    "\002\000\004\005\300\001\002\000\004\026\301\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\006\002\005\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\010\025" +
    "\011\037\012\032\013\042\014\030\015\036\016\026\017" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\010\077\011\037\012\032\013\042\014" +
    "\030\015\036\016\026\017\041\001\001\000\002\001\001" +
    "\000\022\010\073\011\037\012\032\013\042\014\030\015" +
    "\036\016\026\017\041\001\001\000\002\001\001\000\022" +
    "\010\060\011\037\012\032\013\042\014\030\015\036\016" +
    "\026\017\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\010\051\011\037\012\032\013" +
    "\042\014\030\015\036\016\026\017\041\001\001\000\022" +
    "\010\050\011\037\012\032\013\042\014\030\015\036\016" +
    "\026\017\041\001\001\000\002\001\001\000\022\010\044" +
    "\011\037\012\032\013\042\014\030\015\036\016\026\017" +
    "\041\001\001\000\022\010\043\011\037\012\032\013\042" +
    "\014\030\015\036\016\026\017\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\132\001\001\000\002\001\001" +
    "\000\004\006\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\260\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

//variables utilizadas para el analisis sintactico
private boolean estado = true;
private Objeto objeto = null;

public boolean getEstado(){
	return estado;
}

private int verificar_numero(int n_aux){
	if(n_aux < 101 && n_aux > 0){ 
	n_aux = n_aux / 10; n_aux = n_aux  *10;
	} else{
	n_aux = 100;
	}
	return n_aux;
}//fin del metodo para verificar numeros

private boolean verificar_path(String descripcion){
	boolean aceptado = false;
	//se eliminan las comillas que se tienen al inicio y al final de la cadena
        String path_aux = "";
	String path = descripcion.substring(1,descripcion.length()-1);
        if(path.indexOf("/") > -1 ){
            path_aux = path.replaceAll("/","\\");
        }
	//Utilizando Regex se verifica que sea un path y no una descripcion
	Pattern patron = Pattern.compile("^(?:[\\w]\\:|\\\\)(\\\\[a-z_\\-\\s0-9\\.]+)+\\.(jpg|gif|bmp|raw|jpeg|png|tif)$");
	Matcher analizador = patron.matcher(path);
	if(analizador.find()){
		File imagen  = new File(path);
		if(imagen.exists()){
			//se guarda la imagen
			aceptado = true;
		}else{
			//el path no existe pero si es un path
			aceptado = true;
		}
	}else{
		aceptado = false;
		estado = false;
		//es una descripcion y no imagen
	}
	return aceptado;
}//fin del metodo para separar imagenes de descripciones

/**Metodo al que se llama automáticamente ante algún error sintactico.*/ 
public void syntax_error(Symbol s){ 
 //System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
 Error_encontrado error_sintactico = new Error_encontrado(s.value.toString(), "", s.left, s.right+1, true);
 Arbol_AST.getLista_errores().add(error_sintactico);
} 
 /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/ 
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
 Error_encontrado error_sintactico = new Error_encontrado(s.value.toString(),"", s.left, s.right+1, true); 
} 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ARCHIVO_CONFIGURACION 
            {
              Object RESULT =null;
		
			if(parser.estado == true){
                JOptionPane.showMessageDialog(null,"NO SE HAN ENCONTRADO "
                + "ERRORES","EXITO",JOptionPane.WARNING_MESSAGE);	
			}else{
     			JOptionPane.showMessageDialog(null,"HAY UN ERROR LEXICO O "
                + "SINTACTICO\n CONSULTE EL AREA DE ERRORES"
                + "","ERROR",JOptionPane.ERROR_MESSAGE);
			} 
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ARCHIVO_CONFIGURACION ::= abrir_tag r_configuracion cerrar_tag CONFIGURACION abrir_tag s_guion r_configuracion cerrar_tag 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVO_CONFIGURACION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ARCHIVO_CONFIGURACION ::= error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVO_CONFIGURACION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONFIGURACION ::= abrir_tag r_fondo cerrar_tag CONFIGURACION_FONDO abrir_tag s_guion r_fondo cerrar_tag abrir_tag r_disenio cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_disenio cerrar_tag abrir_tag r_figura cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_figura cerrar_tag 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONFIGURACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-23)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONFIGURACION ::= abrir_tag r_disenio cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_disenio cerrar_tag abrir_tag r_fondo cerrar_tag CONFIGURACION_FONDO abrir_tag s_guion r_fondo cerrar_tag abrir_tag r_figura cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_figura cerrar_tag 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONFIGURACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-23)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONFIGURACION ::= abrir_tag r_figura cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_figura cerrar_tag abrir_tag r_disenio cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_disenio cerrar_tag abrir_tag r_fondo cerrar_tag CONFIGURACION_FONDO abrir_tag s_guion r_fondo cerrar_tag 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONFIGURACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-23)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONFIGURACION ::= abrir_tag r_disenio cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_disenio cerrar_tag abrir_tag r_figura cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_figura cerrar_tag abrir_tag r_fondo cerrar_tag CONFIGURACION_FONDO abrir_tag s_guion r_fondo cerrar_tag 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONFIGURACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-23)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONFIGURACION ::= abrir_tag r_fondo cerrar_tag CONFIGURACION_FONDO abrir_tag s_guion r_fondo cerrar_tag abrir_tag r_figura cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_figura cerrar_tag abrir_tag r_disenio cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_disenio cerrar_tag 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONFIGURACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-23)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONFIGURACION ::= error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONFIGURACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CONFIGURACION_FONDO ::= llave_abrir FONDO llave_cerrar s_coma CONFIGURACION_FONDO 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Objeto f = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		Arbol_AST.getTabla_objetos().put(f.getNombre(), f);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONFIGURACION_FONDO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CONFIGURACION_FONDO ::= llave_abrir FONDO llave_cerrar 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Objeto f = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		Arbol_AST.getTabla_objetos().put(f.getNombre(), f);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONFIGURACION_FONDO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CONFIGURACION_FONDO ::= error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONFIGURACION_FONDO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FONDO ::= r_nombre s_igual atributo_nombre s_punto_coma r_imagen s_igual descripcion s_punto_coma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
			if(verificar_path(i.toString())==true){
				objeto = new Objeto(n.toString(),i.toString(),0,0,"fondo","");
				RESULT = objeto;
			}else{
			  	objeto = new Objeto(n.toString(),"",0,0,"fondo","");
			  	RESULT = objeto;
			}
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FONDO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FONDO ::= r_imagen s_igual descripcion s_punto_coma r_nombre s_igual atributo_nombre s_punto_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
			if(verificar_path(i.toString())==true){
				objeto = new Objeto(n.toString(),i.toString(),0,0,"fondo","");
				RESULT = objeto;
			}else{
			  	objeto = new Objeto(n.toString(),"",0,0,"fondo","");
			  	RESULT = objeto;
			}
			
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FONDO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARAR_ATRIBUTOS ::= llave_abrir ATRIBUTOS llave_cerrar s_coma DECLARAR_ATRIBUTOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		Arbol_AST.getTabla_objetos().put(a.getNombre(), a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARAR_ATRIBUTOS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARAR_ATRIBUTOS ::= llave_abrir ATRIBUTOS llave_cerrar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		Arbol_AST.getTabla_objetos().put(a.getNombre(), a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARAR_ATRIBUTOS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARAR_ATRIBUTOS ::= error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARAR_ATRIBUTOS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ATRIBUTOS ::= ATRIBUTO_NOMBRE ATRIBUTOS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a.setNombre(n.toString()); RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ATRIBUTOS ::= ATRIBUTO_VIDA ATRIBUTOS 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a.setVida(Integer.parseInt(v.toString())); RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ATRIBUTOS ::= ATRIBUTO_DESTRUIR ATRIBUTOS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a.setDestruir(Integer.parseInt(d.toString())); RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ATRIBUTOS ::= ATRIBUTO_CREDITOS ATRIBUTOS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a.setCreditos(Integer.parseInt(d.toString())); RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ATRIBUTOS ::= ATRIBUTO_IMAGEN ATRIBUTOS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a.setImagen(i.toString()); RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ATRIBUTOS ::= ATRIBUTO_TIPO ATRIBUTOS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a.setTipo(t.toString()); RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ATRIBUTOS ::= ATRIBUTO_DESCRIPCION ATRIBUTOS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a.setDescripcion(d.toString()); RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ATRIBUTOS ::= ATRIBUTO_NOMBRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		objeto = new Objeto(); objeto.setNombre(a.toString()); RESULT = objeto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ATRIBUTOS ::= ATRIBUTO_VIDA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		objeto = new Objeto(); objeto.setVida(Integer.parseInt(a.toString())); RESULT = objeto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ATRIBUTOS ::= ATRIBUTO_DESTRUIR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		objeto = new Objeto(); objeto.setDestruir(Integer.parseInt(a.toString())); RESULT = objeto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ATRIBUTOS ::= ATRIBUTO_CREDITOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		objeto = new Objeto(); objeto.setCreditos(Integer.parseInt(a.toString())); RESULT = objeto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ATRIBUTOS ::= ATRIBUTO_IMAGEN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		objeto = new Objeto(); objeto.setImagen(a.toString()); RESULT = objeto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ATRIBUTOS ::= ATRIBUTO_TIPO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		objeto = new Objeto(); objeto.setTipo(a.toString()); RESULT = objeto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ATRIBUTOS ::= ATRIBUTO_DESCRIPCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		objeto = new Objeto(); objeto.setDescripcion(a.toString()); RESULT = objeto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ATRIBUTO_NOMBRE ::= r_nombre s_igual atributo_nombre s_punto_coma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = n.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_NOMBRE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ATRIBUTO_DESTRUIR ::= r_destruir s_igual numero s_punto_coma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
						int n_aux = Integer.parseInt(n.toString());
						RESULT = parser.verificar_numero(n_aux);
						
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_DESTRUIR",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ATRIBUTO_VIDA ::= r_vida s_igual numero s_punto_coma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
					int n_aux = Integer.parseInt(n.toString());
					RESULT = parser.verificar_numero(n_aux);
					
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_VIDA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATRIBUTO_CREDITOS ::= r_creditos s_igual numero s_punto_coma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
						int n_aux = Integer.parseInt(n.toString());
						RESULT = parser.verificar_numero(n_aux);
						
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_CREDITOS",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ATRIBUTO_IMAGEN ::= r_imagen s_igual descripcion s_punto_coma 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
					if(verificar_path(p.toString())== true){
						RESULT = p.toString();
					}else{
						RESULT = "";
					}
					
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_IMAGEN",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ATRIBUTO_TIPO ::= r_tipo s_igual TIPO s_punto_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = t.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ATRIBUTO_TIPO ::= error 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_TIPO",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ATRIBUTO_DESCRIPCION ::= r_descripcion s_igual descripcion s_punto_coma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = d.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_DESCRIPCION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= r_heroe 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= r_enemigo 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= r_meta 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO ::= r_bomba 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO ::= r_arma 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO ::= r_bonus 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= r_bloque 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}

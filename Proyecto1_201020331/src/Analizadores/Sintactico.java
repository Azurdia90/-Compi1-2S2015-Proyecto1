
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import Logica.Objeto;
import Logica.Arbol_AST;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tabla_simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\003\000\002\003" +
    "\012\000\002\004\032\000\002\004\032\000\002\004\032" +
    "\000\002\004\032\000\002\004\032\000\002\005\007\000" +
    "\002\005\005\000\002\006\012\000\002\006\012\000\002" +
    "\007\007\000\002\007\005\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\011\006\000\002\013\006\000\002\012" +
    "\006\000\002\014\006\000\002\015\006\000\002\016\006" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\004\004\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\267\001\002\000\004\005\007\001\002" +
    "\000\004\025\010\001\002\000\004\004\012\001\002\000" +
    "\004\004\263\001\002\000\010\006\014\007\013\010\015" +
    "\001\002\000\004\025\216\001\002\000\004\025\151\001" +
    "\002\000\004\025\016\001\002\000\004\026\020\001\002" +
    "\000\004\004\100\001\002\000\016\011\022\012\031\013" +
    "\026\023\025\024\033\032\021\001\002\000\004\027\075" +
    "\001\002\000\004\027\072\001\002\000\004\037\067\001" +
    "\002\000\020\011\022\012\031\013\026\023\025\024\033" +
    "\032\021\037\uffe9\001\002\000\004\027\063\001\002\000" +
    "\004\027\051\001\002\000\020\011\022\012\031\013\026" +
    "\023\025\024\033\032\021\037\uffec\001\002\000\020\011" +
    "\022\012\031\013\026\023\025\024\033\032\021\037\uffea" +
    "\001\002\000\004\027\044\001\002\000\020\011\022\012" +
    "\031\013\026\023\025\024\033\032\021\037\uffed\001\002" +
    "\000\004\027\040\001\002\000\020\011\022\012\031\013" +
    "\026\023\025\024\033\032\021\037\uffeb\001\002\000\020" +
    "\011\022\012\031\013\026\023\025\024\033\032\021\037" +
    "\uffe8\001\002\000\004\037\uffee\001\002\000\004\037\ufff1" +
    "\001\002\000\004\034\041\001\002\000\004\031\042\001" +
    "\002\000\020\011\uffe2\012\uffe2\013\uffe2\023\uffe2\024\uffe2" +
    "\032\uffe2\037\uffe2\001\002\000\004\037\ufff3\001\002\000" +
    "\004\035\045\001\002\000\004\031\046\001\002\000\020" +
    "\011\uffe5\012\uffe5\013\uffe5\023\uffe5\024\uffe5\032\uffe5\037" +
    "\uffe5\001\002\000\004\037\ufff0\001\002\000\004\037\ufff2" +
    "\001\002\000\020\014\057\015\054\016\052\017\060\020" +
    "\056\021\055\022\053\001\002\000\004\031\uffde\001\002" +
    "\000\004\031\uffdf\001\002\000\004\031\uffdb\001\002\000" +
    "\004\031\uffe1\001\002\000\004\031\uffe0\001\002\000\004" +
    "\031\uffdd\001\002\000\004\031\uffdc\001\002\000\004\031" +
    "\062\001\002\000\020\011\uffe3\012\uffe3\013\uffe3\023\uffe3" +
    "\024\uffe3\032\uffe3\037\uffe3\001\002\000\004\035\064\001" +
    "\002\000\004\031\065\001\002\000\020\011\uffe6\012\uffe6" +
    "\013\uffe6\023\uffe6\024\uffe6\032\uffe6\037\uffe6\001\002\000" +
    "\004\037\uffef\001\002\000\006\004\ufff4\036\070\001\002" +
    "\000\004\026\020\001\002\000\004\004\ufff5\001\002\000" +
    "\004\030\073\001\002\000\004\031\074\001\002\000\020" +
    "\011\uffe7\012\uffe7\013\uffe7\023\uffe7\024\uffe7\032\uffe7\037" +
    "\uffe7\001\002\000\004\034\076\001\002\000\004\031\077" +
    "\001\002\000\020\011\uffe4\012\uffe4\013\uffe4\023\uffe4\024" +
    "\uffe4\032\uffe4\037\uffe4\001\002\000\004\040\101\001\002" +
    "\000\004\010\102\001\002\000\004\025\103\001\002\000" +
    "\004\004\104\001\002\000\004\007\105\001\002\000\004" +
    "\025\106\001\002\000\004\026\020\001\002\000\004\004" +
    "\110\001\002\000\004\040\111\001\002\000\004\007\112" +
    "\001\002\000\004\025\113\001\002\000\004\004\114\001" +
    "\002\000\004\006\115\001\002\000\004\025\116\001\002" +
    "\000\004\026\117\001\002\000\006\011\127\032\125\001" +
    "\002\000\004\004\121\001\002\000\004\040\122\001\002" +
    "\000\004\006\123\001\002\000\004\025\124\001\002\000" +
    "\004\004\ufffc\001\002\000\004\027\142\001\002\000\004" +
    "\037\137\001\002\000\004\027\130\001\002\000\004\030" +
    "\131\001\002\000\004\031\132\001\002\000\004\032\133" +
    "\001\002\000\004\027\134\001\002\000\004\034\135\001" +
    "\002\000\004\031\136\001\002\000\004\037\ufff7\001\002" +
    "\000\006\004\ufff8\036\140\001\002\000\004\026\117\001" +
    "\002\000\004\004\ufff9\001\002\000\004\034\143\001\002" +
    "\000\004\031\144\001\002\000\004\011\145\001\002\000" +
    "\004\027\146\001\002\000\004\030\147\001\002\000\004" +
    "\031\150\001\002\000\004\037\ufff6\001\002\000\004\026" +
    "\117\001\002\000\004\004\153\001\002\000\004\040\154" +
    "\001\002\000\004\006\155\001\002\000\004\025\156\001" +
    "\002\000\004\004\157\001\002\000\006\007\160\010\161" +
    "\001\002\000\004\025\200\001\002\000\004\025\162\001" +
    "\002\000\004\026\020\001\002\000\004\004\164\001\002" +
    "\000\004\040\165\001\002\000\004\010\166\001\002\000" +
    "\004\025\167\001\002\000\004\004\170\001\002\000\004" +
    "\007\171\001\002\000\004\025\172\001\002\000\004\026" +
    "\020\001\002\000\004\004\174\001\002\000\004\040\175" +
    "\001\002\000\004\007\176\001\002\000\004\025\177\001" +
    "\002\000\004\004\ufffa\001\002\000\004\026\020\001\002" +
    "\000\004\004\202\001\002\000\004\040\203\001\002\000" +
    "\004\007\204\001\002\000\004\025\205\001\002\000\004" +
    "\004\206\001\002\000\004\010\207\001\002\000\004\025" +
    "\210\001\002\000\004\026\020\001\002\000\004\004\212" +
    "\001\002\000\004\040\213\001\002\000\004\010\214\001" +
    "\002\000\004\025\215\001\002\000\004\004\ufffe\001\002" +
    "\000\004\026\020\001\002\000\004\004\220\001\002\000" +
    "\004\040\221\001\002\000\004\007\222\001\002\000\004" +
    "\025\223\001\002\000\004\004\224\001\002\000\006\006" +
    "\225\010\226\001\002\000\004\025\245\001\002\000\004" +
    "\025\227\001\002\000\004\026\020\001\002\000\004\004" +
    "\231\001\002\000\004\040\232\001\002\000\004\010\233" +
    "\001\002\000\004\025\234\001\002\000\004\004\235\001" +
    "\002\000\004\006\236\001\002\000\004\025\237\001\002" +
    "\000\004\026\117\001\002\000\004\004\241\001\002\000" +
    "\004\040\242\001\002\000\004\006\243\001\002\000\004" +
    "\025\244\001\002\000\004\004\ufffb\001\002\000\004\026" +
    "\117\001\002\000\004\004\247\001\002\000\004\040\250" +
    "\001\002\000\004\006\251\001\002\000\004\025\252\001" +
    "\002\000\004\004\253\001\002\000\004\010\254\001\002" +
    "\000\004\025\255\001\002\000\004\026\020\001\002\000" +
    "\004\004\257\001\002\000\004\040\260\001\002\000\004" +
    "\010\261\001\002\000\004\025\262\001\002\000\004\004" +
    "\ufffd\001\002\000\004\040\264\001\002\000\004\005\265" +
    "\001\002\000\004\025\266\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\016\001\001\000\002\001\001\000\020\010" +
    "\022\011\031\012\026\013\033\014\027\015\023\016\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\065\011\031\012\026\013\033\014\027" +
    "\015\023\016\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\010\047\011\031\012\026\013\033\014\027" +
    "\015\023\016\034\001\001\000\020\010\046\011\031\012" +
    "\026\013\033\014\027\015\023\016\034\001\001\000\002" +
    "\001\001\000\020\010\042\011\031\012\026\013\033\014" +
    "\027\015\023\016\034\001\001\000\002\001\001\000\020" +
    "\010\036\011\031\012\026\013\033\014\027\015\023\016" +
    "\034\001\001\000\020\010\035\011\031\012\026\013\033" +
    "\014\027\015\023\016\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\117\001\001\000\004\006\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

//variables utilizadas para el analisis sintactico
private boolean estado = false;
private Objeto objeto = null;

public boolean getEstado(){
	return estado;
}

/**Metodo al que se llama automáticamente ante algún error sintactico.*/ 
public void syntax_error(Symbol s){ 
 System.out.println("Error en la Línea " + (s.right+1) +" Columna " +s.left+ ". Identificador " +s.value + " no reconocido." ); 
} 
 /**Metodo al que se llama en el momento en que ya no es posible una recuperación de errores.*/ 
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
 System.out.println("Error en la Línea " + (s.right+1)+ "Columna "+s.left+". Identificador " + s.value + " no reconocido."); 
} 


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= ARCHIVO_CONFIGURACION 
            {
              Object RESULT =null;
		parser.estado = true;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ARCHIVO_CONFIGURACION ::= abrir_tag r_configuracion cerrar_tag CONFIGURACION abrir_tag s_guion r_configuracion cerrar_tag 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARCHIVO_CONFIGURACION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CONFIGURACION ::= abrir_tag r_fondo cerrar_tag CONFIGURACION_FONDO abrir_tag s_guion r_fondo cerrar_tag abrir_tag r_disenio cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_disenio cerrar_tag abrir_tag r_figura cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_figura cerrar_tag 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONFIGURACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-23)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CONFIGURACION ::= abrir_tag r_disenio cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_disenio cerrar_tag abrir_tag r_fondo cerrar_tag CONFIGURACION_FONDO abrir_tag s_guion r_fondo cerrar_tag abrir_tag r_figura cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_figura cerrar_tag 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONFIGURACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-23)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CONFIGURACION ::= abrir_tag r_figura cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_figura cerrar_tag abrir_tag r_disenio cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_disenio cerrar_tag abrir_tag r_fondo cerrar_tag CONFIGURACION_FONDO abrir_tag s_guion r_fondo cerrar_tag 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONFIGURACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-23)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CONFIGURACION ::= abrir_tag r_disenio cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_disenio cerrar_tag abrir_tag r_figura cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_figura cerrar_tag abrir_tag r_fondo cerrar_tag CONFIGURACION_FONDO abrir_tag s_guion r_fondo cerrar_tag 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONFIGURACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-23)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CONFIGURACION ::= abrir_tag r_fondo cerrar_tag CONFIGURACION_FONDO abrir_tag s_guion r_fondo cerrar_tag abrir_tag r_figura cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_figura cerrar_tag abrir_tag r_disenio cerrar_tag DECLARAR_ATRIBUTOS abrir_tag s_guion r_disenio cerrar_tag 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONFIGURACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-23)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CONFIGURACION_FONDO ::= llave_abrir FONDO llave_cerrar s_coma CONFIGURACION_FONDO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONFIGURACION_FONDO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CONFIGURACION_FONDO ::= llave_abrir FONDO llave_cerrar 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONFIGURACION_FONDO",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FONDO ::= r_nombre s_igual atributo_nombre s_punto_coma r_imagen s_igual descripcion s_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FONDO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FONDO ::= r_imagen s_igual descripcion s_punto_coma r_nombre s_igual atributo_nombre s_punto_coma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FONDO",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARAR_ATRIBUTOS ::= llave_abrir ATRIBUTOS llave_cerrar s_coma DECLARAR_ATRIBUTOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		Arbol_AST.getLista_objetos().add(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARAR_ATRIBUTOS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARAR_ATRIBUTOS ::= llave_abrir ATRIBUTOS llave_cerrar 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		Arbol_AST.getLista_objetos().add(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARAR_ATRIBUTOS",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ATRIBUTOS ::= ATRIBUTO_NOMBRE ATRIBUTOS 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a.setNombre(n.toString()); RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ATRIBUTOS ::= ATRIBUTO_VIDA ATRIBUTOS 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a.setVida(Integer.parseInt(v.toString())); RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ATRIBUTOS ::= ATRIBUTO_DESTRUIR ATRIBUTOS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a.setDestruir(Integer.parseInt(d.toString())); RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ATRIBUTOS ::= ATRIBUTO_IMAGEN ATRIBUTOS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a.setImagen(i.toString()); RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ATRIBUTOS ::= ATRIBUTO_TIPO ATRIBUTOS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a.setTipo(t.toString()); RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ATRIBUTOS ::= ATRIBUTO_DESCRIPCION ATRIBUTOS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Objeto a = (Objeto)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		a.setDescripcion(d.toString()); RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ATRIBUTOS ::= ATRIBUTO_NOMBRE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		objeto = new Objeto(); objeto.setNombre(a.toString()); RESULT = objeto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ATRIBUTOS ::= ATRIBUTO_VIDA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		objeto = new Objeto(); objeto.setVida(Integer.parseInt(a.toString())); RESULT = objeto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ATRIBUTOS ::= ATRIBUTO_DESTRUIR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		objeto = new Objeto(); objeto.setDestruir(Integer.parseInt(a.toString())); RESULT = objeto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ATRIBUTOS ::= ATRIBUTO_IMAGEN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		objeto = new Objeto(); objeto.setImagen(a.toString()); RESULT = objeto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ATRIBUTOS ::= ATRIBUTO_TIPO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		objeto = new Objeto(); objeto.setTipo(a.toString()); RESULT = objeto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ATRIBUTOS ::= ATRIBUTO_DESCRIPCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		objeto = new Objeto(); objeto.setDescripcion(a.toString()); RESULT = objeto;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ATRIBUTO_NOMBRE ::= r_nombre s_igual atributo_nombre s_punto_coma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = n.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_NOMBRE",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ATRIBUTO_DESTRUIR ::= r_destruir s_igual numero s_punto_coma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n_aux = Integer.parseInt(n.toString());
if(n_aux < 101 && n_aux > 0){ n_aux = n_aux / 10; n_aux = n_aux  *10;} else{n_aux = 100;} RESULT = n_aux;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_DESTRUIR",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ATRIBUTO_VIDA ::= r_vida s_igual numero s_punto_coma 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int n_aux = Integer.parseInt(n.toString());
if(n_aux < 101 && n_aux > 0){ n_aux = n_aux / 10; n_aux = n_aux  *10;} else{n_aux = 100;} RESULT = n_aux;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_VIDA",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ATRIBUTO_IMAGEN ::= r_imagen s_igual descripcion s_punto_coma 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = p.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_IMAGEN",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ATRIBUTO_TIPO ::= r_tipo s_igual TIPO s_punto_coma 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = t.toString();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_TIPO",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ATRIBUTO_DESCRIPCION ::= r_descripcion s_igual descripcion s_punto_coma 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ATRIBUTO_DESCRIPCION",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPO ::= r_heroe 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO ::= r_enemigo 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO ::= r_meta 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO ::= r_bomba 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO ::= r_arma 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO ::= r_bonus 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO ::= r_bloque 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT = r;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
